Markdown.swift
	public struct MarkdownOptions
	public init() {}
	private var _emptyElementSuffix = " />"
	private var _linkEmails = true
	private var _strictBoldItalic = false
	private var _autoNewlines = false
	private var _autoHyperlink = false
	private var _encodeProblemUrlCharacters = false
	private var _defaultWidth = ""
	private var _imagesAsLinks = false
	public var imagesUrl : [String] = []
	private enum TokenType
	private struct Token
	private init(type: TokenType, value: String)
	private var type: TokenType
	private var value: String
	private static let _markerUL = "[*+-]"
	private static let _markerOL = "\\d+[.]"
	private static var _escapeTable = Dictionary<String, String>()
	private static var _invertedEscapeTable = Dictionary<String, String>()
	private static var _backslashEscapeTable = Dictionary<String, String>()
	private var _urls = Dictionary<String, String>()
	private var _titles = Dictionary<String, String>()
	private var _htmlBlocks = Dictionary<String, String>()
	private var _listLevel: Int = 0
	private static let autoLinkPreventionMarker = "\u{1A}P" // temporarily replaces "://" where auto-linking shouldn't happen;
	private static let _newlinesLeadingTrailing = Regex("^\\n+|\\n+\\z")
	private static let _newlinesMultiple = Regex("\\n{2,}")
	private static let _leadingWhitespace = Regex("^\\p{Z}*")
	private static let _htmlBlockHash = Regex("\u{1A}H\\d+H")
	private mutating func setup()
	private mutating func cleanup()
	private static var _nestedBracketsPattern = ""
	private static var _nestedParensPattern = ""
	private static var _linkDef = Regex("\n".join([
	private mutating func linkEvaluator(match: Match) -> String
	private static let _blocksHtml = Regex(Markdown.getBlockPattern(),
	private mutating func htmlEvaluator(match: Match) -> String
	private static func getHashKey(s: String, isHtmlBlock: Bool) -> String
	private static let _htmlTokens = Regex("\n".join([
	private static let _anchorRef = Regex("\n".join([
	private static let _anchorInline = Regex("\n".join([
	private static let _anchorRefShortcut = Regex("\n".join([
	private func saveFromAutoLinking(s: String) -> String
	private func anchorRefEvaluator(match: Match) -> String
	private func anchorRefShortcutEvaluator(match: Match) -> String
	private func anchorInlineEvaluator(match: Match) -> String
	private static let _imagesRef = Regex("\n".join([
	private static let _imagesInline = Regex("\n".join([
	private func escapeImageAltText(var s: String) -> String
	private mutating func imageReferenceEvaluator(match: Match) -> String
	private mutating func imageInlineEvaluator(match: Match) -> String
	mutating func imageTag(var url: String, var altText: String, var title: String?) -> String
	private func matchRegex(text : String, pattern : String) -> Bool
	private static let _headerSetext = Regex("\n".join([
	private static let _headerAtx = Regex("\n".join([
	private mutating func setextHeaderEvaluator(match: Match) -> String
	private mutating func atxHeaderEvaluator(match: Match) -> String
	private static let _horizontalRules = Regex("\n".join([
	private static let _listMarker = "(?:\(_markerUL)|\(_markerOL))"
	private static let _wholeList = "\n".join([
	private static let _listNested = Regex("^" + _wholeList,
	private static let _listTopLevel = Regex("(?:(?<=\\n\\n)|\\A\\n?)" + _wholeList,
	private mutating func getListEvaluator(isInsideParagraphlessListItem: Bool = false) -> MatchEvaluator
	private static let _codeBlock = Regex("\n".join([
	private func codeBlockEvaluator(match: Match) -> String
	private static let _codeSpan = Regex("\n".join([
	private func codeSpanEvaluator(match: Match) -> String
	private static let _bold = Regex("(\\*\\*|__) (?=\\S) (.+?[*_]*) (?<=\\S) \\1",
	private static let _strictBold = Regex("(^|[\\W_])(?:(?!\\1)|(?=^))(\\*|_)\\2(?=\\S)(.*?\\S)\\2\\2(?!\\2)(?=[\\W_]|$)",
	private static let _italic = Regex("(\\*|_) (?=\\S) (.+?) (?<=\\S) \\1",
	private static let _strictItalic = Regex("(^|[\\W_])(?:(?!\\1)|(?=^))(\\*|_)(?=\\S)((?:(?!\\2).)*?\\S)\\2(?!\\2)(?=[\\W_]|$)",
	private static let _blockquote = Regex("\n".join([
	private mutating func blockQuoteEvaluator(match: Match) -> String
	private func blockQuoteEvaluator2(match: Match) -> String
	private static let _charInsideUrl = "[-A-Z0-9+&@#/%?=~_|\\[\\]\\(\\)!:,\\.;\u{1a}]"
	private static let _charEndingUrl = "[-A-Z0-9+&@#/%=~_|\\[\\])]"
	private static let _autolinkBare = Regex("(<|=\")?\\b(https?|ftp)(://\(_charInsideUrl)*\(_charEndingUrl))(?=$|\\W)",
	private static let _endCharRegex = Regex(_charEndingUrl,
	private static func handleTrailingParens(match: Match) -> String
	private func hyperlinkEvaluator(match: Match) -> String
	private func emailEvaluator(match: Match) -> String
	private static let _outDent = Regex("^\\p{Z}{1,\(_tabWidth)}",
	private static let _codeEncoder = Regex("&|<|>|\\\\|\\*|_|\\{|\\}|\\[|\\]")
	private func encodeCodeEvaluator(match: Match) -> String
	private static let _amps = Regex("&(?!((#[0-9]+)|(#[xX][a-fA-F0-9]+)|([a-zA-Z][a-zA-Z0-9]*));)")
	private static let _angles = Regex("<(?![A-Za-z/?\\$!])")
	private static var _backslashEscapes: Regex!
	private func escapeBackslashesEvaluator(match: Match) -> String
	private static let _unescapes = Regex("\u{1A}E\\d+E")
	private func unescapeEvaluator(match: Match) -> String
	private static let _problemUrlChars = NSCharacterSet(charactersInString: "\"'*()[]$:")
	private static func attributeEncode(s: String) -> String
	private static func doesString(string: NSString, containSubstring substring: NSString) -> Bool
	private static func trimEnd(var string: NSString, _ suffix: NSString) -> String
	private static func isNilOrEmpty(s: String?) -> Bool
	private static func isNilOrEmpty(s: NSString?) -> Bool
	private let U16_COLON   = Markdown.unicharForUnicodeScalar(":"  as UnicodeScalar)
	private let U16_SLASH   = Markdown.unicharForUnicodeScalar("/"  as UnicodeScalar)
	private let U16_ZERO    = Markdown.unicharForUnicodeScalar("0"  as UnicodeScalar)
	private let U16_NINE    = Markdown.unicharForUnicodeScalar("9"  as UnicodeScalar)
	private let U16_NEWLINE = Markdown.unicharForUnicodeScalar("\n" as UnicodeScalar)
	private let U16_RETURN  = Markdown.unicharForUnicodeScalar("\r" as UnicodeScalar)
	private let U16_TAB     = Markdown.unicharForUnicodeScalar("\t" as UnicodeScalar)
	private let U16_SPACE   = Markdown.unicharForUnicodeScalar(" "  as UnicodeScalar)
	private let regularExpresson: NSRegularExpression!
	private init(_ pattern: String, options: NSRegularExpressionOptions = NSRegularExpressionOptions(0))
	private func replace(input: String, _ replacement: String) -> String
	private static func replace(input: String, pattern: String, replacement: String) -> String
	private func replace(input: String, evaluator: (MarkdownRegexMatch) -> String) -> String
	private static func replace(input: String, pattern: String, evaluator: (MarkdownRegexMatch) -> String) -> String
	private static func replace(input: String, pattern: String, evaluator: (MarkdownRegexMatch) -> String, options: NSRegularExpressionOptions) -> String
	private static func replace(input: String, pattern: String, replacement: String, options: NSRegularExpressionOptions) -> String
	private func matches(input: String) -> [MarkdownRegexMatch]
	private static func matches(input: String, pattern: String) -> [MarkdownRegexMatch]
	private func isMatch(input: String) -> Bool
	private static func isMatch(input: String, pattern: String) -> Bool
	private func split(input: String) -> [String]
	private static func escape(input: String) -> String
	let textCheckingResult: NSTextCheckingResult
	let string: NSString
	init(textCheckingResult: NSTextCheckingResult, string: NSString)
	var value: NSString
	var index: Int
	var length: Int
	func valueOfGroupAtIndex(idx: Int) -> NSString
main.swift
	func main(args : [String] = [])
Configuration.swift
	var selfPath : String = ""
	var templatePath : String = ""
	var articlesPath : String = ""
	var outputPath : String = ""
	var defaultAuthor : String = "John Appleseed"
	var dateStyle : String = "MM/dd/yyyy"
	var blogTitle : String = "A new blog"
	var imageWidth : String = "640"
	var imagesLinks : Bool = false
	var ftpAdress : String = ""
	var ftpUsername : String = ""
	var ftpPassword : String = ""
	var ftpPort : Int = 22
	var siteRoot : String = ""
